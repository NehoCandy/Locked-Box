
#include <Wire.h>

// adafruit graphics&OLED libs
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "headerFont.h"
#include "InputFont.h"
#include "hintTitleFont.h"
//#include "hintContentFont.h"
#include "finalQuestionFont.h"

// stepper motor lib and params
#include <Stepper.h>
int stepsPerRevolution = 2048;
Stepper platform(stepsPerRevolution, 2, 4, 3, 5);
Stepper drawers(stepsPerRevolution, A0, A2, A1, A3);
// Stepper platfort(stepsPerRevolution, 3, 1, 2, 0);
int motSpeed = 10;
int tt = 0;
int xx = 0;
int yy = 0;

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

byte screen = 0;

bool isFirst = true;

const unsigned char ring_bitmap[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x07, 0xc1, 0xe0, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x08, 0x20, 0x00, 0x00, 0x00, 0x03, 0xff, 0x07, 0x80, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x08, 0x40, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x07, 0x80, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x82, 0x00, 0x01, 0x80, 0x00, 0x00, 0x3f, 0x00, 0x07, 0x80, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x40, 0x00, 0x02, 0x00, 0x00, 0x1e, 0x3c, 0x00, 0x03, 0xc0, 0x00, 0x03, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3e, 0x00, 0x03, 0xfc, 0x00, 0x03, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3c, 0x3e, 0x00, 0x00, 0xff, 0xe0, 0x03, 0x00,
    0x00, 0x00, 0x1e, 0x00, 0x0f, 0xe0, 0x18, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x1f, 0xf0, 0x03, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xdf, 0xf0, 0x3f, 0x00, 0xf0, 0x1f, 0x3e, 0x00, 0x01, 0xf8, 0x03, 0x00,
    0x00, 0x00, 0x00, 0x37, 0xff, 0xe0, 0x1f, 0xe1, 0xf0, 0x0f, 0xfe, 0x00, 0x00, 0x7c, 0x01, 0x80,
    0x00, 0x00, 0x00, 0x37, 0xff, 0xe0, 0x0f, 0xfb, 0xe0, 0x0f, 0xf8, 0x00, 0x00, 0x3c, 0x01, 0x80,
    0x00, 0x00, 0x3c, 0x37, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x0f, 0xc0, 0x00, 0x00, 0x3e, 0x01, 0x80,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x3f, 0x80, 0x07, 0x80, 0x00, 0x40, 0x7c, 0x01, 0xc0,
    0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0x80, 0x07, 0x80, 0x00, 0xff, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xfb, 0xf8, 0x00, 0x07, 0x80, 0x03, 0xc0, 0x00, 0xff, 0xf8, 0x00, 0x1c,
    0x00, 0x00, 0x00, 0x01, 0xfa, 0x07, 0x00, 0x07, 0xc0, 0x03, 0xc0, 0x78, 0x7f, 0xc0, 0x00, 0x3e,
    0x00, 0x00, 0x00, 0x00, 0xe7, 0xf1, 0x80, 0x03, 0xc0, 0x03, 0xc7, 0xf8, 0x00, 0x00, 0x0f, 0xfe,
    0x00, 0x00, 0x00, 0x01, 0x98, 0x0c, 0xc0, 0x03, 0xe0, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xfe,
    0x00, 0x00, 0x00, 0x03, 0x60, 0x06, 0x60, 0x01, 0xe0, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xfc,
    0x00, 0x00, 0x00, 0x02, 0x40, 0x03, 0x30, 0x01, 0xf0, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf8,
    0x00, 0x00, 0x00, 0x06, 0x80, 0x01, 0x30, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
    0x00, 0x00, 0x00, 0x06, 0x80, 0x01, 0x30, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x80, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0xc0, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x40, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x30, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x9f, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char heart_bitmap[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xff, 0xfc, 0x1b, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x38, 0xff, 0xff, 0xfe, 0x33, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x70, 0xff, 0xff, 0xff, 0x63, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x60, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x1f, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char broken_heart_bitmap[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x9f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xdf, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x9f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xbf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

#define LOGO_HEIGHT 16
#define LOGO_WIDTH 16
static const unsigned char PROGMEM logo_bmp[] =
    {0b00011100, 0b00111000,
     0b00111110, 0b01111100,
     0b00111110, 0b01111100,
     0b01111111, 0b11111110,
     0b11111111, 0b11111111,
     0b11111111, 0b11111111,
     0b11111111, 0b11111111,
     0b11111111, 0b11111111,
     0b11111111, 0b11111111,
     0b01111111, 0b11111110,
     0b00111111, 0b11111100,
     0b00011111, 0b11111000,
     0b00001111, 0b11110000,
     0b00000111, 0b11100000,
     0b00000011, 0b11000000,
     0b00000001, 0b10000000};

// Keypad config

#include <Keypad.h>

char pin[11] = {' ', ' ', ' ', ' ', ' ', ' ', '*', '*', '*', '*', 0};
int pinPosition = 0;
char str[18] = {'_', '_', '_', '_', ' ', '_', '_', '_', '\n', '_', '_', '_', '_', '_', ' ', '_', '_', 0};
int textPosition = 0;

const byte ROWS = 4; // four rows
const byte COLS = 4; // four columns
// define the symbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] = {
    {'w', 'y', 'm', '6'},
    {'p', '2', 'o', 'q'},
    {'r', 'u', '0', 't'},
    {'l', 'a', 'i', 'e'}};

char keys[ROWS][COLS] = {
    {'w', 'y', 'a', 'm'},
    {'i', 'o', 'r', 'e'},
    {'l', 'u', 'r', 'v'},
    {'l', 'm', 'y', 'e'}};
byte rowPins[ROWS] = {9, 8, 7, 6};     // connect to the row pinouts of the keypad
byte colPins[COLS] = {13, 12, 11, 10}; // connect to the column pinouts of the keypad

// initialize an instance of class NewKeypad
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// indicating variables
int displayed = 0;
int finished = 0;
int scene = 1;

void setup()
{
  // start the Wire lib for the I2C
  Wire.begin();

  drawers.setSpeed(motSpeed);
  platform.setSpeed(motSpeed);

  // initialize OLED with I2C addr 0x3C and set stuff:
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.clearDisplay();
  display.display();
}

void loop()
{
  switch (scene)
  {
  case 1:
    intro();
    scene = 2;
    break;

  case 2:
    if (!displayed)
    {
      displayEnterCreds();
    }
    while (!finished)
    {
      displayMiddle();
    }
    if (finished)
    {
      checkIfCorrect();
    }
    break;
  case 3:
    displayMarry();
    scene = 4;
    break;

  case 4:
    display.setFont(&Schoolbell_Regular_18);
    while (!finished)
    {
      displayLetters();
    }
    if (finished)
    {
      checkIfMarry();
    }
    break;

  case 5:
    Heartsflakes(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT);
    break;

  default:
    break;
  }
}

void intro()
{
  clearDisplay();
  display.setFont(&Just_Another_Hand_Regular_22);
  display.setCursor(0, 35);
  display.print(F("      [ START ]"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.print(F("     HEY YOU  -)"));
  display.setCursor(92, 27);
  display.print(":");
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.print(F("      SO... UMM..."));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.print(F("      WHERE TO\n        BEGIN?"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.print(F("           ......."));
  display.display();
  pressNext();
  //  display.setCursor(0, 30);
  //  display.print("        OKKKK");
  //  display.display();
  //  pressNext();
  display.setCursor(0, 30);
  display.print(F("SO AFTER THAT\n        INTRO"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.print(F("     SHALL WE\n       BEGIN?"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.print(F("     STEP ONE:\n        GIFTS:"));
  display.display();
  pressNext();
  display.setFont(&Orbitron_Bold_12);
  display.setCursor(0, 25);
  display.print(F("FIND THE CODE TO OBTAIN THE GIFTS:"));
  display.display();
  pressNext();
  // change to the next scene
}

void displayEnterCreds()
{
  // init display
  // clear display buffer
  display.clearDisplay();

  // set position of printing
  ///////////HEADER////////////
  display.setCursor(0, 8);
  display.setFont(&Orbitron_Bold_12);
  display.print("Enter Password:");

  ////////////FOOTER/////////////
  display.setCursor(25, 60);
  display.setFont(&Open_Sans_Hebrew_Condensed_Light_Italic_14);

  display.print("Hint:Luna Park");
  /////////////MIDDLE/////////////
  display.setCursor(0, 40);
  display.setFont(&Schoolbell_Regular_18);
  display.print(pin);
  display.display();

  displayed = 1;
}
void displayMiddle()
{

  display.fillRect(0, 20, 127, 15, BLACK);
  // wait for a password to be pressed
  display.setCursor(0, 40);
  char key = keypad.getKey();
  while (key == NO_KEY)
  {
    key = keypad.getKey();
    delay(100);
  }

  for (int i = 0; i < 4; i++)
  {
    if (textPosition == i)
    {
      pin[i + 6] = key;
      display.print(pin);
      display.display();
      textPosition++;
      break;
    }
    if (textPosition == 3)
    {
      finished = 1;
    }
  }
}

void checkIfCorrect()
{
  if (pin[6] == 'w' && pin[7] == 'i' && pin[8] == 'l' && pin[9] == 'l')
  {
    scene = 3;
    displayHeart();
    openDrawers();

    // move the indexes back to the start
    finished = 0;
    displayed = 0;
    textPosition = 0;
  }
  else
  {
    displayBrokenHeart();
    finished = 0;
    displayed = 0;
    textPosition = 0;
    pin[6] = '*';
    pin[7] = '*';
    pin[8] = '*';
    pin[9] = '*';
  }
}

void displayMarry()
{
  display.clearDisplay();
  display.setFont(&Just_Another_Hand_Regular_22);
  display.setCursor(0, 30);
  display.print(F("      AND NOW"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.print(F("    ONE FINAL\n         TASK:"));
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.println(F("     BUT FIRST"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.println(F("   WE NEED TO\n      BE MORE... "));
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.println(F("       FORMAL:"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.println(F("   LET ME HOLD\n      THE BOX"));
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.println(F("    AND TO GET\n   IN POSITION"));
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.println("      ONE SEC");
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.println("          ........");
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.println("         NOW-");
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.println("       I KNEEL");
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.println("      YOU TYPE");
  display.display();
  pressNext();
  display.setCursor(0, 30);
  display.println(" AND THE TASK\nIS AS FOLLOWS:");
  display.display();
  pressNext();
  display.setFont(&Orbitron_Bold_12);
  display.setCursor(0, 9);
  display.print(F("     TYPE THE\n\n ---OBVIOUS---\n\n    QUESTION"));
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.print(F("    REMEMBER"));
  display.display();
  pressNext();
  display.setCursor(0, 25);
  display.print(F("    I'M ON ONE \n\n        KNEE"));
  display.display();
  pressNext();
  display.setCursor(0, 25);
  display.print(F("     AND YOU\n\n WANT GLITTER"));
  display.display();
  pressNext();
  display.setCursor(0, 25);
  display.print(F("    SO IT CAN'T\n       BE THAT\n        HARD..."));
  display.display();
  pressNext();
  display.setCursor(0, 9);
  display.print(F("     I BELIEVE\n\n\n       IN YOU"));
  display.display();
  pressNext();
  display.setCursor(0, 35);
  display.print(F("   GOOD LUCK :)"));
  display.display();
  pressNext();
}

void displayLetters()
{
  if (!displayed)
  {
    display.setCursor(0, 30);
    display.print(str);
    display.display();
    displayed = 1;
  }
  char customKey = keypad.getKey(); // this function reads the pressed key
  while (customKey == NO_KEY)
  {
    customKey = keypad.getKey();
  }

  for (int i = 0; i < 17; i++)
  {
    if (textPosition == i)
    {
      if (textPosition == 4 || textPosition == 8 || textPosition == 14)
      {
        textPosition++;
      }
      str[textPosition] = customKey;
      display.fillRect(0, 0, 127, 64, BLACK);
      display.setCursor(0, 30);
      display.print(str);
      display.display();
      break;
    }
  }
  if (textPosition == 16)
  {
    finished = 1;
  }
  textPosition++;
}

void checkIfMarry()
{
  if (str[0] == 'w' && str[1] == 'i' && str[2] == 'l' && str[3] == 'l' && str[5] == 'y' && str[6] == 'o' && str[7] == 'u' && str[9] == 'm' && str[10] == 'a' && str[11] == 'r' && str[12] == 'r' && str[13] == 'y' && str[15] == 'm' && str[16] == 'e')
  {
    scene = 5;
    displayRing();
    liftPlatform();
  }
  else
  {
    displayBrokenHeart();
    finished = 0;
    displayed = 0;
    textPosition = 0;

    str[0] = '_';
    str[1] = '_';
    str[2] = '_';
    str[3] = '_';
    str[5] = '_';
    str[6] = '_';
    str[7] = '_';
    str[9] = '_';
    str[10] = '_';
    str[11] = '_';
    str[12] = '_';
    str[13] = '_';
    str[15] = '_';
    str[16] = '_';
  }
}

void pressNext()
{
  char customKey = keypad.getKey(); // this function reads the presed key

  while (customKey == NO_KEY)
  {
    customKey = keypad.getKey();
    delay(100);
  }
  clearDisplay();
}

// a function that prints all text on screen
void displayText(String text, int x, int y)
{
  display.setCursor(x, y);
  display.print(text);
  display.display();
}

void clearDisplay()
{
  display.clearDisplay();
  display.display();
}

void openDrawers()
{
  drawers.step(stepsPerRevolution);
}
void liftPlatform()
{
  platform.step(stepsPerRevolution);
}

void closeBox()
{
  drawers.step(-stepsPerRevolution);
  platform.step(-stepsPerRevolution);
}

void displayHeart()
{
  display.clearDisplay();
  for (int i = 0; i < 3; i++)
  {
    // display the image
    // Draw the bitmap 1:
    display.drawBitmap(0, 0, heart_bitmap, 128, 64, WHITE);
    display.display();
    delay(300);
    display.clearDisplay(); // Make sure the display is cleared
    display.display();
    delay(150);
  }
}

void displayBrokenHeart()
{
  display.clearDisplay(); // Make sure the display is cleared
  for (int i = 0; i < 3; i++)
  {
    // display the image
    // Draw the bitmap 1:
    display.drawBitmap(0, 0, broken_heart_bitmap, 128, 64, WHITE);
    display.display();
    delay(300);
    display.clearDisplay(); // Make sure the display is cleared
    display.display();
    delay(150);
  }
}

void displayRing()
{
  display.clearDisplay();
  for (int i = 0; i < 3; i++)
  {
    // display the image
    // Draw the bitmap 1:
    display.drawBitmap(0, 0, ring_bitmap, 128, 64, WHITE);
    display.display();
    delay(500);
    display.clearDisplay(); // Make sure the display is cleared
    display.display();
    delay(100);
  }
}

//             HEARTFLAKES FUNCTION            //
#define XPOS 0 // Indexes into the 'icons' array in function below
#define YPOS 1
#define DELTAY 2
#define NUMFLAKES 12 // Number of snowflakes in the animation example

void Heartsflakes(const uint8_t *bitmap, uint8_t w, uint8_t h)
{
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for (f = 0; f < NUMFLAKES; f++)
  {
    icons[f][XPOS] = random(1 - LOGO_WIDTH, display.width());
    icons[f][YPOS] = -LOGO_HEIGHT;
    icons[f][DELTAY] = random(1, 6);
  }

  for (;;)
  {                         // Loop forever...
    display.clearDisplay(); // Clear the display buffer
    char customKey = keypad.getKey();
    if (customKey != NO_KEY)
    {
      closeBox();
      display.clearDisplay();
      scene = 1;
      break;
    }
    // Draw each snowflake:
    for (f = 0; f < NUMFLAKES; f++)
    {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
    }

    display.display(); // Show the display buffer on the screen
    delay(200);        // Pause for 1/10 second

    // Then update coordinates of each flake...
    for (f = 0; f < NUMFLAKES; f++)
    {
      icons[f][YPOS] += icons[f][DELTAY];
      // If snowflake is off the bottom of the screen...
      if (icons[f][YPOS] >= display.height())
      {
        // Reinitialize to a random position, just off the top
        icons[f][XPOS] = random(1 - LOGO_WIDTH, display.width());
        icons[f][YPOS] = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}
